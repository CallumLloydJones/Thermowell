/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  5                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     pisoFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         0.1;

deltaT          0.0001;

writeControl    timeStep;

writeInterval   10;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

functions
{
//    #includeFunc surfaces
/*
cauchy
{
 libs ("libutilityFunctionObjects.so");
 type coded;
 name stress;
 writeControl timeStep;
 writeInterval 10;
 enabled yes;

 codeWrite
       #{
	   const volVectorField& U = mesh().lookupObject<volVectorField>("U");
       const volScalarField& p = mesh().lookupObject<volScalarField>("p");   	  

       volTensorField gradU( "gradU", fvc::grad(U) );

       dimensionedScalar nu("nu", dimensionSet(0,2,-1,0,0,0,0), 1.004e-06);
       dimensionedScalar rho("rho",dimensionSet(1,-3,0,0,0,0,0), 1000);
	   
       volTensorField sigma( "sigma", (-rho*p*tensor::I) + (nu*rho*(gradU+ gradU.T())) );
	   sigma.write();
	   
		volTensorField sigmaB
		(
			IOobject
			(
				"sigmaB",
				mesh.time().timeName(),
				mesh,
				IOobject::NO_READ,
				IOobject::NO_WRITE
			),
			mesh,
			dimensionedTensor("null", dimensionSet(1,-1,-2,0,0,0,0), tensor::zero)
		);

	   volTensorField sigmaB( "sigmaB", dimensionedVector("null", dimensionSet(1,-1,-2,0,0,0,0), vector::zero) );

       const word patchName = "Thermowell";
       label patchI = mesh().boundaryMesh().findPatchID(patchName);

       sigmaB.boundaryFieldRef()[patchI] = sigma.boundaryFieldRef()[patchI];
		
       #};
}
*/

traction
{
 libs ("libutilityFunctionObjects.so");
 type coded;
 name traction;
 writeControl timeStep;
 writeInterval 10;
 enabled yes;

 /*
 codeInclude
    #{
    #include "createMesh.H"
	#include "postProcess.H"
    #include "addCheckCaseOptions.H"
    #include "setRootCaseLists.H"
    #include "createTime.H"
    #include "createControl.H"
    #};
*/

 codeWrite
       #{
	   const volVectorField& U = mesh().lookupObject<volVectorField>("U");
       const volScalarField& p = mesh().lookupObject<volScalarField>("p");   	  

       dimensionedScalar nu("nu", dimensionSet(0,2,-1,0,0,0,0), 1.004e-06);
       dimensionedScalar rho("rho",dimensionSet(1,-3,0,0,0,0,0), 1000);	  
	   
	   volTensorField gradU( "gradU", fvc::grad(U) );
       volTensorField sigma( "sigma", (-rho*p*tensor::I) + (nu*rho*(gradU+ gradU.T())) );
	   
		surfaceVectorField traction
		(
			IOobject
			(
				"traction",
				mesh().time().timeName(),
				mesh(),
				IOobject::NO_READ,
				IOobject::AUTO_WRITE
			),
			mesh(),
			dimensionedVector("traction", dimensionSet(1,-1,-2,0,0,0,0), vector::zero)
		);
		
        const word patchName = "Thermowell";
        label patchI = mesh().boundaryMesh().findPatchID(patchName);
        const polyPatch& pp = mesh().boundaryMesh()[patchI];

		forAll(mesh().boundary()[patchI], faceI)
              traction.boundaryFieldRef()[patchI][faceI] = ((-pp.faceAreas()[faceI]/mag(pp.faceAreas()[faceI])) * (-rho.value()*p.boundaryField()[patchI][faceI])) 
			                                             +
			                                            ((-pp.faceAreas()[faceI]/mag(pp.faceAreas()[faceI])) & sigma.boundaryField()[patchI][faceI] )     ;

	   traction.write();
       #};
}


}

// ************************************************************************* //