/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  5                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     pisoFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         0.1;

deltaT          0.0001;

writeControl    timeStep;

writeInterval   10;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

functions
{
//    #includeFunc surfaces
/*
turbulenceFields1
{
    // Mandatory entries (unmodifiable)
    type            turbulenceFields;
    libs            (fieldFunctionObjects);

    // Mandatory entries (runtime modifiable)
    // Either field or fields entries
    fields          (devReff);

    // Optional (inherited) entries
    region          region0;
    enabled         true;
    log             true;
    timeStart       0;
    timeEnd         1000;
    executeControl  timeStep;
    executeInterval 1;
    writeControl    timeStep;
    writeInterval   1;
}
*/

cauchy
{
 libs ("libutilityFunctionObjects.so");
 type coded;
 name stress;
 writeControl timeStep;
writeInterval 10;
enabled yes;


 codeWrite
       #{
	   const volVectorField& U = mesh().lookupObject<volVectorField>("U");
       const volScalarField& p = mesh().lookupObject<volScalarField>("p");   
	   
	   volScalarField p_new( "p_new", p );
	   volVectorField U_new( "U_new", U );

       volTensorField gradU( "gradU", fvc::grad(U_new) );

       dimensionedScalar nu("nu", dimensionSet(0,2,-1,0,0,0,0), 1.004e-06);
       dimensionedScalar rho("rho",dimensionSet(1,-3,0,0,0,0,0), 1000);
	   
       volTensorField sigma( "sigma", (-rho*p_new*tensor::I) + (0.5*nu*rho*(gradU+ gradU.T())) );
       sigma.write();
	   
/*
       volTensorField Sigma
       (
           IOobject
           (
               "Sigma",
               runTime().timeName(),
               mesh,
               IOobject::NO_READ,
               IOobject::AUTO_WRITE
           ),
           (rho*p_new*tensor::one)+ (2*nu*rho*(fvc::grad(U_new))+ fvc::grad(U_new).T())
       );
*/
       #};
}

}

// ************************************************************************* //